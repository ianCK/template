!!! Note that the values are usually passed by reference without copying
!!! copy() is slower, but safer

---Abstract---
	Matrix<T>
	Matrix<T>(int x, T v = 0) : initialize with size x
	Matrix<T>(const Matrix &x) : copy by reference
	void clear() : release used memories
	void resize(int x)
	int size()
	void copy() : create a copy
	T* operator [](int x) : making A[x][y] a valid expression (same as A._val[x][y])
	Matrix operator + (const Matrix &x)
	Matrix operator - (const Matrix &x)
	Matrix operator * (const T &x)
	Matrix operator * (const Matrix &x)
	Matrix operator / (const T &x)
	Matrix operator += (const Matrix &x)
	Matrix operator -= (const Matrix &x)
	Matrix operator *= (const T &x)
	Matrix operator *= (const Matrix &x)
	Matrix operator /= (const T &x)
	T det()
	T det_piviting() : use full piviting to aviod float point error
	!!! not finished

	void out() : for Debug

	Matrix<T1> Pow(Matrix<T1> A, T2 b)

---Complexity---
	Matrix<T> : O(1)
	Matrix<T>(int x, T v = 0) : O(x^2)
	Matrix<T>(const Matrix &x) : O(1)
	void clear() : O(size^2)
	void resize(int x) : O(size^2 + x^2)
	int size() : O(1)
	void copy() : O(size^2)
	T* operator [](int x) : O(1)
	Matrix operator + (const Matrix &x) : O(size^2)
	Matrix operator - (const Matrix &x) : O(size^2)
	Matrix operator * (const T &x) : O(size^2)
	Matrix operator * (const Matrix &x) : O(size^3)
	Matrix operator / (const T &x) : O(size^2)
	{
		Matrix operator += (const Matrix &x)
		Matrix operator -= (const Matrix &x)
		Matrix operator *= (const T &x)
		Matrix operator *= (const Matrix &x)
		Matrix operator /= (const T &x)
	} same as above
	T det() : O(size^3)
	T det_piviting() : O(size^3)
	!!! not finished

	Matrix<T1> Pow(Matrix<T1> A, T2 b) : O(size^3 * lgb)

---Test Source---
	Verification/CF_1511F
	Verification/yosupo_matrix_det
